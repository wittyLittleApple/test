/* XSS攻击 */
// XSS 的本质是：恶意代码未经过滤，与网站正常的代码混在一起；浏览器无法分辨哪些脚本是可信的，导致恶意脚本被执行。由于直接在用户的终端执行，恶意代码能够直接获取用户的信息，利用这些信息冒充用户向网站发起攻击者定义的请求。


// 反射性 XSS
// 攻击者构造出特殊的 URL，其中包含恶意代码。
// 用户打开带有恶意代码的 URL 时，网站服务端将恶意代码从 URL 中取出，拼接在 HTML 中返回给浏览器。
// 用户浏览器接收到响应后解析执行，混在其中的恶意代码也被执行。
// 恶意代码窃取用户数据并发送到攻击者的网站，或者冒充用户的行为，调用目标网站接口执行攻击者指定的操作。

// 预防：对url的查询参数进行转义后再输出到页面。


// DOM型XSS攻击
// 攻击者构造出特殊数据，其中包含恶意代码。
// 用户浏览器执行了恶意代码。
// 恶意代码窃取用户数据并发送到攻击者的网站，或者冒充用户的行为，调用目标网站接口执行攻击者指定的操作。

// 预防：
// 对于url链接(例如图片的src属性)，那么直接使用 encodeURIComponent 来转义。
// 非url
function encodeHtml(str) {
    return str.replace(/"/g, '&quot;')
        .replace(/'/g, '&apos;')
        .replace(/</g, '&lt;')
        .replace(/>/g, '&gt;');
}


// 存储型XSS攻击
// 攻击者将恶意代码提交到目标网站的数据库中。
// 用户打开目标网站时，网站服务端将恶意代码从数据库取出，拼接在 HTML 中返回给浏览器。
// 用户浏览器接收到响应后解析执行，混在其中的恶意代码也被执行。
// 恶意代码窃取用户数据并发送到攻击者的网站，或者冒充用户的行为，调用目标网站接口执行攻击者指定的操作。

// 这种攻击常见于带有用户保存数据的网站功能，如论坛发帖、商品评论、用户私信等。

// 预防：
// 前端数据传递给服务器之前，先转义/过滤(防范不了抓包修改数据的情况)
// 服务器接收到数据，在存储到数据库之前，进行转义/过滤
// 前端接收到服务器传递过来的数据，在展示到页面前，先进行转义/过滤


// 其他预防XSS方法：
// Content Security Policy
// 输入内容长度控制
// 输入内容限制
// 其他安全措施

